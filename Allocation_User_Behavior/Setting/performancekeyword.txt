*** Settings ***
Resource          environment.txt
Resource          global_resource.txt
Resource          ../page/ZK.txt
Resource          ../page/DailyTasks.txt
Resource          ../page/standard7thpage.txt
Library           MyUtil_Update

*** Keywords ***
enterPageByClick
    [Arguments]    ${submit_button}    ${verify_element}    ${verify_text}
    sleep    1S
    click element    ${submit_button}
    sleep    3S
    #    Wait Until Page Contains    Processing...    10
    Wait Until Page Does Not Contain    Processing...    600
    #    Wait Until Page Contains    initializing...    10
    #    Wait Until Page Does Not Contain    initializing...    1000
    Wait Until Page Contains element    ${verify_element}    30
    wait until element is visible    ${verify_element}
    Wait Until element Contains    ${verify_element}    ${verify_text}    60

enterCertainModel
    [Arguments]    ${model_name}    ${verify_element}    ${verify_text}
    : FOR    ${round}    IN RANGE    0    1000
    \    click element    ${navigation_menu}
    \    sleep    5S
    \    ${menu_display}    get element attribute    ${navigation_menu_open}@class
    \    exit for loop if    '${menu_display}' == 'open'
    run keyword if    '${menu_display}' !='open'    fail
    run keyword if    '${menu_display}' == 'open'    click link    ${model_name}
    wait until page does not contain element    ${verify_element}//center    20
    wait until element contains    ${verify_element}    ${verify_text}    20

enterNewPageInModel
    [Arguments]    ${trigger_element}    ${verify_element}    ${verify_text}
    click element    ${trigger_element}
    sleep    3S
    Wait Until Page Does Not Contain    Processing...    1000
    Wait Until element Contains    ${verify_element}    ${verify_text}    1000

downloadZKExcel
    [Arguments]    ${trigger_element}    ${model_name}
    click element    ${trigger_element}
    sleep    1S
    Wait Until Page Does Not Contain    Processing...    6000
    handleSaveFileWindow    ${prod_download_dir}    ${model_name}_${user}

editCell
    [Arguments]    ${cellXpath}    ${inputValue}
    double click element    ${cellXpath}
    double click element    ${ZK_Cell_Selected}
    #    ${editValue}    get element attribute    ${DailyTasks_Cell_editCell}@style
    #    Run keyword if    '${editValue}' == ''    double click element    Xpath=//div[@class='zsselecti']
    wait until element is visible    ${ZK_Cell_Edit}    20
    input text    ${ZK_Cell_Edit}    ${inputValue}
    press key    ${ZK_Cell_Edit}    \\13
    #    click element    ${cellXpath}/parent/following-sibling::*[1]
    Wait Until Page Does Not Contain    Processing...    100

editOptions
    [Arguments]    ${optionsBtn}    ${verifyText}    ${mainPage_verifyText}    ${options_title}
    enter page by click    ${optionsBtn}    ${options_title}    ${verifyText}
    #    element should be visible    ${optionsBtn}
    ${checkedCountPath}    replace string    ${ZK_Options_checkedBox_rowCount_sectionPH}    section    ${verifyText}
    ${uncheckCountPath}    replace string    ${ZK_Options_uncheckBox_rowCount_sectionPH}    section    ${verifyText}
    ${checkedOptionsCount}    get matching xpath count    ${checkedCountPath}
    ${checkedOption}    evaluate    random.randint(1,${checkedOptionsCount})    random
    click element    Xpath=${checkedCountPath}[${checkedOption}]${ZK_checkBox_count}
    page should not contain    error
    ${uncheckOptionsCount}    get matching xpath count    ${uncheckCountPath}
    ${uncheckOption}    evaluate    random.randint(1,${uncheckOptionsCount})    random
    click element    Xpath=${uncheckCountPath}[${uncheckOption}]${ZK_checkBox_count}
    page should not contain    error
    enter page by click    ${ZK_Button_Close}    ${ZK_selectedTab}    ${mainPage_verifyText}

editDTViewCriteria
    [Arguments]    ${viewCriteriaBtn}    ${verifyText}    ${mainPage_verifyText}    ${viewCriteria_verifyElement}    ${DT_type}
    enter page by click    ${viewCriteriaBtn}    ${viewCriteria_verifyElement}    ${verifyText}
    @{statusType}    run keyword if    '${DT_type}' == 'Allocation'    get list items    ${DailyTasks_viewCriteria_Dropdown_Status}
    @{dataType}    run keyword if    '${DT_type}' == 'Allocation'    get list items    ${DailyTasks_viewCriteria_Dropdown_DataSourceType}
    ${statusType_count}    run keyword if    '${DT_type}' == 'Allocation'    get length    ${statusType}
    ${dataType_count}    run keyword if    '${DT_type}' == 'Allocation'    get length    ${dataType}
    ${statusType_num}    run keyword if    '${DT_type}' == 'Allocation'    evaluate    random.randint(0,${statusType_count}-1)    random
    ${dataType_num}    run keyword if    '${DT_type}' == 'Allocation'    evaluate    random.randint(0,${dataType_count}-1)    random
    @{orderCity}    get list items    ${DailyTasks_viewCriteria_Dropdown_OrderCity}
    ${orderCity_count}    get length    ${orderCity}
    ${orderCity_num}    evaluate    random.randint(0,${orderCity_count}-1)    random
    #    ${filterAttr_count}    get matching xpath count    ${DailyTasks_viewCriteria_filterAttributes_count}
    run keyword if    '${DT_type}' == 'Allocation'    select from list by label    ${DailyTasks_viewCriteria_Dropdown_Status}    @{statusType}[${statusType_num}]
    run keyword if    '${DT_type}' == 'Allocation'    list selection should be    ${DailyTasks_viewCriteria_Dropdown_Status}    @{statusType}[${statusType_num}]
    select from list by label    ${DailyTasks_viewCriteria_Dropdown_OrderCity}    @{orderCity}[${orderCity_num}]
    list selection should be    ${DailyTasks_viewCriteria_Dropdown_OrderCity}    @{orderCity}[${orderCity_num}]
    run keyword if    '${DT_type}' == 'Allocation'    select from list by label    ${DailyTasks_viewCriteria_Dropdown_DataSourceType}    @{dataType}[${dataType_num}]
    run keyword if    '${DT_type}' == 'Allocation'    list selection should be    ${DailyTasks_viewCriteria_Dropdown_DataSourceType}    @{dataType}[${dataType_num}]
    #    input text    ${DailyTasks_viewCriteria_Text_FromDate}    ${DT_fromDate}
    #    input text    ${DailyTasks_viewCriteria_Text_ToDate}    ${DT_toDate}
    run keyword if    '${DT_timeType}' == 'Shop Date' and '${DT_type}' == 'Allocation'    click element    ${DailyTasks_viewCriteria_Radio_InDCDate}
    ...    ELSE IF    '${DT_timeType}' == 'In DC Date' and '${DT_type}' == 'Allocation'    click element    ${DailyTasks_viewCriteria_Radio_ShopDate}
    ${removeFilter_count}    get matching xpath count    ${DailyTasks_viewCriteria_removeFilter_count}
    run keyword if    ${removeFilter_count}>=1    removeZKFilters    ${DailyTasks_viewCriteria_Button_removeFilter_last}    ${removeFilter_count}    ${DailyTasks_viewCriteria_removeFirstOptionsCount}    #
    ...    # run keyword if    '@{DT_Criteria}[0]'    selectZKCustomCriteria    ${DailyTasks_viewCriteria_Dropdown_filterHierarchy_last}    ${DailyTasks_viewCriteria_Options_filterHierarachy_last}    ${DailyTasks_viewCriteria_popPanel_options}
    ...    # ${DailyTasks_viewCriteria_filterHierarachy_lastOptions_itemPH}    ${DailyTasks_viewCriteria_Button_addFilter_last}    ${DailyTasks_viewCriteria_lastRow_addRowNum}    @{DT_Criteria}
    #    :FOR    ${item}    IN RANGE    1    ${filterAttr_count}+1
    #    run keyword if    ${item} != 1    click element    ${DailyTasks_viewCriteria_Button_addFilter_last}
    #    sleep    3S
    #    wait until page does not contain    Processing...    60
    #    wait until element is visible    ${DailyTasks_viewCriteria_Dropdown_filterHierarchy_last}    30
    #    ${currentAttr}    get text    Xpath=${DailyTasks_viewCriteria_filterAttributes_count}[${item}]/td[2]
    #    select from list by label    ${DailyTasks_viewCriteria_Dropdown_filterHierarchy_last}    ${currentAttr}
    dynamicZKSelectCriteria    ${DailyTasks_viewCriteria_Dropdown_filterHierarchy_last}    ${DailyTasks_viewCriteria_Options_filterHierarachy_last}    ${ZK_Criteria_filterHierarachy_popupOptionsCount_last}    ${ZK_Criteria_filterItems_jquery}    ${ZK_Criteria_filterHierarachy_popupOptions_header}    ${ZK_Criteria_filterHierarachy_popupOptions_rowPH}
    ...    ${ZK_Criteria_filterHierarachy_popupOptions_header_checked}    ${DailyTasks_viewCriteria_Button_addFilter_last}    ${DailyTasks_viewCriteria_Button_removeFilter_last}
    page should not contain    error
    enter page by click    ${ZK_Button_Close}    ${ZK_selectedTab}    ${mainPage_verifyText}

removeZKFilters
    [Arguments]    ${path}    ${count}    ${firstOptionsCount_path}
    : FOR    ${ot}    IN RANGE    1    ${count}
    \    click element    ${path}
    \    sleep    3S
    ${firstOptionsCount}    get matching xpath count    ${firstOptionsCount_path}
    : FOR    ${num}    IN RANGE    1    ${firstOptionsCount}+1
    \    ${firstOptionsCount_path}    replace string    ${firstOptionsCount_path}    //span    //span[${num}]/span
    \    click element    Xpath=${firstOptionsCount_path}

selectZKCustomCriteria
    [Arguments]    ${filterHierarchy_last}    ${options_filterHierarchy_last}    ${popPanel_options}    ${popPanel_option_itemPH}    ${addFilterBtn}    ${lastRow_addRowNum}
    ...    @{criteria}
    ${criteriaCount}    get length    ${criteria}
    : FOR    ${item}    IN RANGE    0    ${criteriaCount}
    \    @{Items}    split string    @{criteria}[${item}]    /
    \    @{options}    split string    @{Items}[1]    ,
    \    select from list by label    ${filterHierarchy_last}    @{Items}[0]
    \    #    wait until page contains element    ${options_filterHierarchy_last}
    \    wait until element is visible    ${options_filterHierarchy_last}    30
    \    click element    ${options_filterHierarchy_last}
    \    wait until page contains element    ${popPanel_options}    30
    \    selectZKCriteriaOptions    ${popPanel_options}    ${popPanel_option_itemPH}    ${options_filterHierarchy_last}    @{options}
    \    wait until page contains element    ${addFilterBtn}    30
    \    click element    ${addFilterBtn}
    \    wait until page does not contain element    ${popPanel_options}    30
    \    ${rowsCount}    evaluate    ${item}+2
    \    wait until page contains element    ${lastRow_addRowNum}[${rowsCount}]    30

selectZKCriteriaOptions
    [Arguments]    ${popPanel_options}    ${popPanel_option_itemPH}    ${options_filterHierarchy_last}    @{options}
    ${num}    set variable    0
    : FOR    ${option}    IN    @{options}
    \    ${num}    evaluate    ${num}+1
    \    ${popPanel_option_itemPH}    replace string    ${popPanel_option_itemPH}    item    ${option}
    \    click element    ${popPanel_option_itemPH}
    \    wait until page contains element    ${options_filterHierarchy_last}[${num}]    30

findZKElementByScroll
    [Arguments]    ${elementCountPath}    ${TopOrLeft}    ${scrollSize}
    ${scrollSize}    convert to integer    ${scrollSize}
    : FOR    ${num}    IN RANGE    1    1000
    \    ${scrollPosition}    evaluate    ${scrollSize}*${num}
    \    ${currentPosition}    run keyword if    ${num}>1    execute javascript    return $("span.zsscrollinfo span").text()
    \    ...    ELSE IF    ${num} == 1 and '${TopOrLeft}' == 'Top'    set variable    Row
    \    ...    ELSE IF    ${num} == 1 and '${TopOrLeft}' == 'Left'    set variable    Column
    \    execute javascript    $(".zsscroll").scroll${TopOrLeft}(${scrollPosition})
    \    #    sleep    3S
    \    run keyword if    ${num}==1    wait until element contains    Xpath=//span[@class='zsscrollinfo']/span    ${currentPosition}    200
    \    ...    ELSE    wait until element does not contain    Xpath=//span[@class='zsscrollinfo']/span    ${currentPosition}    200
    \    wait until page does not contain    Processing...    600
    \    ${elementsCount}    get matching xpath count    ${elementCountPath}
    \    exit for loop if    ${elementsCount} >0
    [Return]    ${scrollPosition}

dynamicSelectCriteria
    [Arguments]    ${dropdown_filterHierarachy_last}    ${filterHierarachy_options_last}    ${filterHierarachy_popupOptionsCount_last}
    ${removeRowPath}    replace string    ${filterHierarachy_options_last}    [last()]    ${EMPTY}
    ${removeRowPath}    replace string    ${removeRowPath}    Xpath=    ${EMPTY}
    ${removeRowCount}    get matching xpath count    ${removeRowPath}
    : FOR    ${num}    IN RANGE    1    ${removeRowCount}+1
    \    run keyword if    ${removeRowCount} > ${num}    click button    ${Criteria_Button_removeFilter_last}
    \    run keyword if    ${removeRowCount} == ${num}    select from list by index    ${dropdown_filterHierarachy_last}    0
    \    run keyword if    ${removeRowCount} == ${num}    list selection should be    ${dropdown_filterHierarachy_last}    ${EMPTY}
    \    sleep    1S
    ${filterItems}    execute javascript    ${Criteria_filterItems_jquery}
    ${filterItems}    replace string    ${filterItems}    \13    ${EMPTY}
    ${filterItems}    strip string    ${filterItems}
    @{filterItems}    split string    ${filterItems}    ,
    : FOR    ${item}    IN    @{filterItems}
    \    ${item}    strip string    ${item}
    \    select from list by label    ${dropdown_filterHierarachy_last}    ${item}
    \    list selection should be    ${dropdown_filterHierarachy_last}    ${item}
    \    #    page should not contain    error
    \    wait until page contains element    ${filterHierarachy_options_last}    60
    \    click element    ${filterHierarachy_options_last}
    \    #    page should not contain    error
    \    wait until page contains element    Xpath=${filterHierarachy_popupOptionsCount_last}    30
    \    ${optionsCount}    get matching xpath count    ${filterHierarachy_popupOptionsCount_last}
    \    ${optionNum}    evaluate    random.randint(1,${optionsCount})    random
    \    select checkbox    Xpath=${filterHierarachy_popupOptionsCount_last}[${optionNum}]//input[@type='checkbox']
    \    checkbox should be selected    Xpath=${filterHierarachy_popupOptionsCount_last}[${optionNum}]//input[@type='checkbox']
    \    click element    Xpath=//tr[contains(@class,'filtertablerow')][last()]//input[@type='button' and @title='Add Filter']
    \    wait until page does not contain element    ${filterHierarachy_options_last}    30
    \    #    page should not contain    error
    \    sleep    1S

ListConvertToString
    [Arguments]    ${splitBy}    @{list}
    ${listLength}    get length    ${list}
    ${round}    set variable    1
    ${str}    set variable    ${EMPTY}
    : FOR    ${item}    IN    @{list}
    \    ${str}    run keyword if    '${item}'!='${SPACE}'    set variable    ${str}${item}${splitBy}
    \    ...    ELSE    set variable    ${str}
    \    ${round}    evaluate    ${round}+1
    [Return]    ${str}

checkCriteria
    [Arguments]    ${attri}    ${path_AttriValPH}    @{vals}
    ${path_valPH}    replace string    ${path_AttriValPH}    'Attri'    '${attri}'
    : FOR    ${item}    IN    @{vals}
    \    ${path}    replace string    ${path_valPH}    'Val'    '${item}'
    \    select checkbox    ${path}
    \    checkbox should be selected    ${path}
    \    sleep    1S

dynamicZKSelectCriteria
    [Arguments]    ${dropdown_filterHierarachy_last}    ${filterHierarachy_options_last}    ${filterHierarachy_popupOptionsCount_last}    ${filterItems_jquery}    ${popupOptions_headerItem}    ${popupOptions_item_rowPH}
    ...    ${popOptions_header_checked}    ${button_addFilter_last}    ${button_removeFilter_last}
    ${removeRowPath}    replace string    ${dropdown_filterHierarachy_last}    [last()]    ${EMPTY}
    ${removeRowPath}    replace string    ${removeRowPath}    Xpath=    ${EMPTY}
    ${selectedDropdownCountPath}    replace string    ${dropdown_filterHierarachy_last}    Xpath=    ${EMPTY}
    ${removeRowCount}    get matching xpath count    ${removeRowPath}
    : FOR    ${num}    IN RANGE    1    ${removeRowCount}+1
    \    run keyword if    ${removeRowCount} > ${num}    click button    ${button_removeFilter_last}
    \    ${selectedDropdownCount}    get matching xpath count    ${selectedDropdownCountPath}[@selected='selected']
    \    run keyword if    ${removeRowCount} == ${num} and ${selectedDropdownCount} > 0    unselect from list    ${dropdown_filterHierarachy_last}
    \    #    run keyword if    ${removeRowCount} == ${num}    list selection should be    ${dropdown_filterHierarachy_last}    ${EMPTY}
    \    sleep    1S
    ${filterItems}    execute javascript    ${filterItems_jquery}
    ${filterItems}    replace string    ${filterItems}    \13    ${EMPTY}
    ${filterItems}    strip string    ${filterItems}
    @{filterItems}    split string    ${filterItems}    ,
    ${filterItems_count}    get length    ${filterItems}
    : FOR    ${item}    IN    @{filterItems}
    \    ${item}    strip string    ${item}
    \    wait until element is enabled    ${dropdown_filterHierarachy_last}    30
    \    wait until page does not contain    Processing...    600
    \    select from list by label    ${dropdown_filterHierarachy_last}    ${item}
    \    sleep    2S
    \    ${selectedOption}    execute javascript    return $("select:visible:last :selected").text()
    \    should be equal as strings    ${selectedOption}    ${item}
    \    #    page should not contain    error
    \    #    wait until page contains element    ${filterHierarachy_options_last}    60
    \    wait until element is visible    ${filterHierarachy_options_last}    60
    \    click element    ${filterHierarachy_options_last}
    \    #    page should not contain    error
    \    #    wait until page contains element    Xpath=${filterHierarachy_popupOptionsCount_last}    30
    \    wait until page does not contain    Processing...    60
    \    wait until element is visible    Xpath=${filterHierarachy_popupOptionsCount_last}    30
    \    ${optionsCount}    get matching xpath count    ${filterHierarachy_popupOptionsCount_last}
    \    ${optionNum}    evaluate    random.randint(1,${optionsCount})    random
    \    ${optionRow}    run keyword if    ${optionNum} > 1    evaluate    ${optionNum}-1
    \    ${optionItemXpath}    run keyword if    ${optionNum} == 1    set variable    ${popupOptions_headerItem}
    \    ...    ELSE    replace string    ${popupOptions_item_rowPH}    [row]    [${optionRow}]
    \    wait until page does not contain    Processing...    600
    \    click element    ${optionItemXpath}
    \    run keyword if    ${optionNum} == 1    wait until element is visible    ${popOptions_header_checked}    120
    \    ...    ELSE    wait until page contains element    ${optionItemXpath}/ancestor::tr[contains(@class,'selected')]    120
    \    #    run keyword if    ${optionNum} == 1    wait until page contains element    ${Security_create/editRuleException_filterHierarachy_popOptions_header_checked}    # ELSE
    \    ...    # wait until page contains element    ${optionItemXpath}/ancestor::tr[contains(@class,'selected')]
    \    ${filterItems_count}    evaluate    ${filterItems_count}-1
    \    run keyword if    ${filterItems_count}>0    wait until element is enabled    ${button_addFilter_last}
    \    run keyword if    ${filterItems_count}>0    click element    ${button_addFilter_last}
    \    run keyword if    ${filterItems_count}>0    sleep    1S    #    wait until page does not contain element
    \    ...    # ${filterHierarachy_options_last}    30
    \    run keyword if    ${filterItems_count}>0    wait until page does not contain    Processing...    60
    \    run keyword if    ${filterItems_count}>0    list should have no selections    ${dropdown_filterHierarachy_last}
    \    #    page should not contain    error
    \    run keyword if    ${filterItems_count}>0    sleep    1S

RandomSelectOptionOnDropdown
    [Arguments]    ${dropdown}    ${startRow}=0    ${excludeSelected}=0
    @{options}    run keyword if    '${excludeSelected}' == '0'    get list items    ${dropdown}
    ...    ELSE    execute javascript    ${excludeSelected}
    ${optionsCount}    get length    ${options}
    return from keyword if    ${optionsCount} == 0
    ${num}    evaluate    random.randint(${startRow},${optionsCount}-1)    random
    Wait Until Page Does Not Contain    Processing...    600
    select from list by label    ${dropdown}    @{options}[${num}]
    list selection should be    ${dropdown}    @{options}[${num}]
    [Return]    @{options}[${num}]

selectCriteria
    [Arguments]    ${dropdown_filterHierarachy_last}    ${filterHierarachy_options_last}    ${filterHierarachy_popupOptionsCount_last}    ${filterHierarachy_popUpOptions_last_checkbox_optionPH}    @{criteria}
    ${removeRowPath}    replace string    ${filterHierarachy_options_last}    [last()]    ${EMPTY}
    ${removeRowPath}    replace string    ${removeRowPath}    Xpath=    ${EMPTY}
    ${removeRowCount}    get matching xpath count    ${removeRowPath}
    : FOR    ${num}    IN RANGE    1    ${removeRowCount}+1
    \    run keyword if    ${removeRowCount} > ${num}    click button    ${Criteria_Button_removeFilter_last}
    \    run keyword if    ${removeRowCount} == ${num}    select from list by index    ${dropdown_filterHierarachy_last}    0
    \    run keyword if    ${removeRowCount} == ${num}    list selection should be    ${dropdown_filterHierarachy_last}    ${EMPTY}
    \    sleep    1S
    : FOR    ${item}    IN    @{criteria}
    \    @{rows}    split string    ${item}    //
    \    select from list by label    ${dropdown_filterHierarachy_last}    @{rows}[0]
    \    list selection should be    ${dropdown_filterHierarachy_last}    @{rows}[0]
    \    #    page should not contain    error
    \    wait until page contains element    ${filterHierarachy_options_last}    60
    \    click element    ${filterHierarachy_options_last}
    \    #    page should not contain    error
    \    wait until page contains element    Xpath=${filterHierarachy_popupOptionsCount_last}    30
    \    @{options}    split string    @{rows}[1]    ,
    \    select criteria options    ${filterHierarachy_popUpOptions_last_checkbox_optionPH}    @{options}
    \    click element    ${Criteria_Button_addFilter_last}
    \    ${pre-selectedOptions_xpath}    replace string    ${filterHierarachy_options_last}    [last()]    [last()]/preceding-sibling::tr[1]
    \    wait until page does not contain element    ${filterHierarachy_options_last}    30
    \    wait until page contains element    ${pre-selectedOptions_xpath}/following-sibling::div[@class='multiC']    30
    \    element should contain    ${pre-selectedOptions_xpath}    @{rows}[1]
    \    #    page should not contain    error
    \    sleep    1S
    run keyword if    @{criteria} != @{EMPTY}    click element    ${Criteria_Button_removeFilter_last}

selectCriteriaOptions
    [Arguments]    ${filterHierarachy_popUpOptions_last_checkbox_optionPH}    @{options}
    : FOR    ${option}    IN    @{options}
    \    ${option}    strip string    ${option}
    \    ${option_checkbox_xpath}    replace string    ${filterHierarachy_popUpOptions_last_checkbox_optionPH}    option    ${option}
    \    select checkbox    ${option_checkbox_xpath}
    \    checkbox should be selected    ${option_checkbox_xpath}

downloadFile
    [Arguments]    ${trigger_element}    ${model_name}    ${userName}    ${userNum}    ${fileType}
    click element    ${trigger_element}
    sleep    3S
    @{windows}    list windows
    switchLastWindow
    ${error_count}    get matching Xpath count    //big[text()='Error']
    run keyword if    ${error_count} > 0    click element    ${Button_closeWindow}
    run keyword and continue on failure    run keyword if    ${error_count} > 0    Fail    There are error message!
    run keyword if    ${error_count} > 0    select window    @{windows}[0]
    return from keyword if    ${error_count} > 0
    ${downloadFileName}    handleSaveFileWindow    ${download_dir}    ${model_name}_${userName}_${userNum}.${fileType}
    select window    @{windows}[0]
    [Return]    ${downloadFileName}

downloadZKExcelUpdate
    [Arguments]    ${trigger_element}    ${model_name}    ${download_dir}    ${userName}    ${userNum}
    click element    ${trigger_element}
    sleep    1S
    Wait Until Page Does Not Contain    Processing...    6000
    ${downloadFile}    handleSaveFileWindow    ${download_dir}    ${model_name}_${userName}_${userNum}.xlsx
    [Return]    ${downloadFile}

getZKSheetData
    [Arguments]    ${pagesCount}    ${scrollLeftPagesCount}
    ${topPosition}    evaluate    0
    ${endRow}    execute javascript    ${ZK_sheet_rowNum_last_jquery}
    @{data}    get ZK Cols Data    ${scrollLeftPagesCount}
    wait until page does not contain    Processing...    60
    ${endRow_position}    execute javascript    ${ZK_rowTopPosition_last_jquery}
    wait until page does not contain    Processing...    60
    ${titleEndTopPosition}    execute javascript    return $(".zstopblock").height()    #    return $(".zstopblock").children("div:last").offset().top
    wait until page does not contain    Processing...    60
    ${dataMaxHeight}    execute javascript    return $(".zsdata").height()
    : FOR    ${pageNum}    IN RANGE    0    ${pagesCount}
    \    ${topPosition}    evaluate    ${topPosition}+${endRow_position}-${titleEndTopPosition}    #    ${topPosition}+${endRow_position}*2/3
    \    exit for loop if    ${topPosition}>=${dataMaxHeight}    #    ${topPosition}>=${dataMaxHeight} or ${endRow_position}>=${dataMaxHeight}
    \    execute javascript    $(".zsscroll").scrollTop(${topPosition})
    \    sleep    1S
    \    Wait Until Page Does Not Contain    Processing...    600
    \    sleep    3S
    \    @{data_new}    get ZK Cols Data    ${scrollLeftPagesCount}
    \    ${endRow_new}    execute javascript    ${ZK_sheet_rowNum_last_jquery}
    \    ${endRow}    set variable    ${endRow_new}
    \    wait until page does not contain    Processing...    60
    \    ${endRow_position}    execute javascript    ${ZK_rowTopPosition_last_jquery}
    \    @{data}    mergeZKRowData    ${data}    ${data_new}
    execute javascript    $(".zsscroll").scrollTop(0)
    sleep    1S
    Wait Until Page Does Not Contain    Processing...    600
    sleep    3S
    #    click element    ${ZK_Title_Style#}
    #    log many    @{data}
    @{data}    del ZK Blank Cols    ${data}    50
    log many    @{data}
    [Return]    @{data}

getZKColsData
    [Arguments]    ${leftPagesCount}
    ${leftPosition}    evaluate    0
    @{colsData}    execute Javascript    ${ZK_sheetDataByRowColList_jquery}
    wait until page does not contain    Processing...    60
    @{topHead}    execute Javascript    ${ZK_sheet_topHeadList_jquery}
    wait until page does not contain    Processing...    60
    ${endCol_position}    execute javascript    ${ZK_colLeftPosition_last_jquery}
    wait until page does not contain    Processing...    60
    ${rowNumLeftPosition}    execute javascript    return $(".zslefthead .zsleftcell:visible:last").offset().left
    wait until page does not contain    Processing...    60
    ${dataMaxWidth}    execute javascript    return $(".zsdata").width()
    : FOR    ${leftPageNum}    IN RANGE    0    ${leftPagesCount}
    \    ${leftPosition}    evaluate    ${leftPosition}+${endCol_position}-${rowNumLeftPosition}    #    ${leftPosition}+${endCol_position}*2/3
    \    exit for loop if    ${leftPosition}>= ${dataMaxWidth}    #    ${leftPosition}>= ${dataMaxWidth} or ${endCol_position}>= ${dataMaxWidth}
    \    execute javascript    $(".zsscroll").scrollLeft(${leftPosition})
    \    sleep    1S
    \    Wait Until Page Does Not Contain    Processing...    600
    \    sleep    3S
    \    @{colsData_new}    execute Javascript    ${ZK_sheetDataByRowColList_jquery}
    \    wait until page does not contain    Processing...    60
    \    @{topHead_new}    execute Javascript    ${ZK_sheet_topHeadList_jquery}
    \    #    log many    @{colsData_new}
    \    #    log many    @{topHead_new}
    \    ${colsData}    ${topHead}    mergeZKColData    ${colsData}    ${topHead}    ${colsData_new}
    \    ...    ${topHead_new}
    \    #    @{colsData}    evaluate    @{dataInfo}[:-1]    list
    \    #    @{topHead}    evaluate    @{dataInfo}[-1]    list
    \    ${endCol_position}    execute javascript    ${ZK_colLeftPosition_last_jquery}
    execute javascript    $(".zsscroll").scrollLeft(0)
    sleep    1S
    Wait Until Page Does Not Contain    Processing...    600
    sleep    3S
    [Return]    @{colsData}

newTabByEditBtnInZK
    [Arguments]    ${submit_button}    ${toTabPath}    ${verify_text}    ${fromTabName}
    sleep    1S
    click element    ${submit_button}
    sleep    3S
    ${currentTabName}    get text    ${toTabPath}
    run keyword if    '${fromTabName}' == '${currentTabName}'    click element    ${submit_button}
    run keyword if    '${fromTabName}' == '${currentTabName}'    sleep    3S
    Wait Until Page Does Not Contain    Processing...    600
    Wait Until Page Contains element    ${toTabPath}    30
    wait until element is visible    ${toTabPath}
    Wait Until element Contains    ${toTabPath}    ${verify_text}    60

allocationUserBehaviorZK2.3_copy
    [Arguments]    ${enterXpath}    ${verifyElement}    ${verifyTxt}    ${userName}    ${userNum}    ${titleEndRowNum}
    ...    ${modelName}    ${expandDoorStartCol}    ${editBtnJquery}    ${downloadVisible}=${EMPTY}
    enterPageByClick    ${enterXpath}    ${verifyElement}    ${verifyTxt}
    @{ZKData}    get ZK sheet Data    ${maxTopPagesCount}    ${maxLeftPagesCount}
    ${downloadFile}    downloadZKexcelUpdate    ${ZK_Button_Excel}    ${modelName}_${verifyTxt}    ${download_dir}    ${userName}    ${userNum}
    ${doorInfoRowsCount}    evaluate    ${titleEndRowNum}-2
    ${downloadFile}    run keyword if    '${downloadVisible}'    copyZKXLSXWithoutExpandDoorInfo    ${downloadFile}    ${expandDoorStartCol}    ${doorInfoRowsCount}
    ...    ELSE    set variable    ${downloadFile}
    run keyword and continue on failure    compareZKAppletWithExcel    ${ZKData}    ${verifyTxt}    ${downloadFile}    ${diff_dir}\\${modelName}_${verifyTxt}_${userName}_${userNum}_downloadFileDiff.txt    ${titleEndRowNum}
    ...    ${expandDoorStartCol}    ${downloadVisible}
    return from keyword if    '${verifyTxt}' == 'Detail by Style Color Size'
    ${styleYearCol}    execute javascript    ${DailyTasks_Style Year_colNum_juqery}
    ${styleSeasonrCol}    execute javascript    ${DailyTasks_Style Season_colNum_juqery}
    ${statusCol}    execute javascript    ${DailyTasks_Status_colNum_juqery}
    ${jobTicketCol}    execute javascript    ${DailyTasks_Job Ticket_colNum_juqery}
    ${dateCol}    run keyword if    ${timeRange}    execute javascript    ${DailyTasks_Shop Date_colNum_juqery}
    ...    ELSE    execute javascript    ${DailyTasks_In DC Date_colNum_juqery}
    ${po_prepackCol}    execute javascript    ${DailyTasks_PO Prepack_colNum_juqery}
    @{po_prepack}    getColDataFromList    ${titleEndRowNum}    ${po_prepackCol}    ${ZKData}
    ${po_openStockCol}    execute javascript    ${DailyTasks_PO Open Stock_colNum_juqery}
    ${po_orderedCol}    execute javascript    ${DailyTasks_PO Ordered_colNum_juqery}
    @{po_openStock}    evaluate    [t[${po_openStockCol}] \ for t in @{ZKData} if @{ZKData}.index(t) >= \ ${titleEndRowNum}]
    @{po_ordered}    evaluate    [t[${po_orderedCol}] \ for t in @{ZKData} if @{ZKData}.index(t) >= \ ${titleEndRowNum}]
    run keyword if    [t for t in @{po_prepack} if t !=0] != @{EMPTY}    log    po prepack have values![t for t in @{po_prepack} if t !=0]
    @{po_diff}    run keyword if    [t for t in @{po_prepack} if t !=0] == @{EMPTY} and @{po_openStock} != @{po_ordered}    evaluate    [(@{po_openStock}.index(a)+${titleEndRowNum}, a,b) \ for a in @{po_openStock} for b in @{po_ordered} if a != b and @{po_openStock}.index(a) == @{po_ordered}.index(b) and len(@{po_openStock}) == len(@{po_ordered})]    9
    run keyword and continue on failure    run keyword if    [t for t in @{po_prepack} if t !=0] == @{EMPTY} and @{po_openStock} != @{po_ordered}    fail    When po prepack have no value, po open stock is not euqal to po ordered!@{po_diff}
    ${receiver_prepackCol}    execute javascript    ${DailyTasks_Receiver Prepack_colNum_juqery}
    @{receiver_prepack}    getColDataFromList    ${titleEndRowNum}    ${receiver_prepackCol}    ${ZKData}
    ${receiver_openStockCol}    execute javascript    ${DailyTasks_Receiver Open Stock_colNum_juqery}
    ${Receiver_orderedCol}    execute javascript    ${DailyTasks_Receiver Qty_colNum_juqery}
    ${Receiver_balanceCol}    execute javascript    ${DailyTasks_Receiver Balance_colNum_juqery}
    @{Receiver_openStock}    evaluate    [t[${Receiver_openStockCol}] \ for t in @{ZKData} if @{ZKData}.index(t) >= ${titleEndRowNum}]
    @{Receiver_ordered}    evaluate    [t[${Receiver_orderedCol}] \ for t in @{ZKData} if @{ZKData}.index(t) >= ${titleEndRowNum}]
    @{Receiver_balance}    evaluate    [t[${Receiver_balanceCol}] \ for t in @{ZKData} if @{ZKData}.index(t) >= ${titleEndRowNum}]
    run keyword if    [t for t in @{Receiver_prepack} if t !=0] != @{EMPTY}    log    Receiver prepack have values![t for t in @{Receiver_prepack} if t !=0]
    @{Receiver_diff}    run keyword if    [t for t in @{Receiver_prepack} if t !=0] == @{EMPTY} and @{Receiver_openStock} != @{Receiver_ordered}    evaluate    [(@{Receiver_openStock}.index(a)+${titleEndRowNum}, a,b) \ for a in @{Receiver_openStock} for b in @{Receiver_ordered} if a != b and @{Receiver_openStock}.index(a) == @{Receiver_ordered}.index(b) and len(@{Receiver_openStock}) == len(@{Receiver_ordered})]
    @{balance_diff}    run keyword if    [t for t in @{Receiver_prepack} if t !=0] == @{EMPTY} and [t for t in @{po_prepack} if t !=0] == @{EMPTY}    evaluate    [(@{Receiver_balance}.index(a)+${titleEndRowNum}, a,b,c) \ for a in @{Receiver_balance} for b in @{Receiver_ordered} for c in @{po_ordered} if a != c-b and @{Receiver_balance}.index(a) == @{Receiver_ordered}.index(b) and len(@{Receiver_balance}) == len(@{Receiver_ordered})and @{Receiver_balance}.index(a) == @{po_ordered}.index(c) and len(@{Receiver_balance}) == len(@{po_ordered})]
    run keyword and continue on failure    run keyword if    [t for t in @{Receiver_prepack} if t !=0] == @{EMPTY} and @{Receiver_openStock} != @{Receiver_ordered}    fail    When Receiver prepack have no value, Receiver open stock is not euqal to Receiver ordered!@{Receiver_diff}
    run keyword and continue on failure    run keyword if    @{balance_diff} != @{EMPTY}    fail    When Receiver prepack and po prepack have no value, Receiver balance is not euqal to (PO Qty - Receiver Qty)!@{balance_diff}
    ${allocated_prepackCol}    execute javascript    ${DailyTasks_Allocated Prepack_colNum_juqery}
    @{allocated_prepack}    getColDataFromList    ${titleEndRowNum}    ${allocated_prepackCol}    ${ZKData}
    ${allocated_openStockCol}    execute javascript    ${DailyTasks_Allocated Open Stock_colNum_juqery}
    ${allocated_orderedCol}    execute javascript    ${DailyTasks_Allocated Qty_colNum_juqery}
    @{allocated_openStock}    evaluate    [t[${allocated_openStockCol}] for t in @{ZKData} if @{ZKData}.index(t) >= ${titleEndRowNum}]
    @{allocated_ordered}    evaluate    [t[${allocated_orderedCol}] for t in @{ZKData} if @{ZKData}.index(t) >= ${titleEndRowNum}]
    run keyword if    [t for t in @{allocated_prepack} if t !=0] != @{EMPTY}    log    allocated prepack have values![t for t in @{allocated_prepack} if t !=0]
    @{allocated_diff}    run keyword if    [t for t in @{allocated_prepack} if t !=0] == @{EMPTY} and @{allocated_openStock} != @{allocated_ordered}    evaluate    [(@{allocated_openStock}.index(a)+${titleEndRowNum}, a,b) for a in @{allocated_openStock} for b in @{allocated_ordered} if a != b and @{allocated_openStock}.index(a) == @{allocated_ordered}.index(b) and len(@{allocated_openStock}) == len(@{allocated_ordered})]
    run keyword and continue on failure    run keyword if    [t for t in @{allocated_prepack} if t !=0] == @{EMPTY} and @{allocated_openStock} != @{allocated_ordered}    fail    When allocated prepack have no value, allocated open stock is not euqal to allocated ordered!@{allocated_diff}
    ${reserved_prepackCol}    execute javascript    ${DailyTasks_Reserved Prepack_colNum_juqery}
    @{reserved_prepack}    getColDataFromList    ${titleEndRowNum}    ${reserved_prepackCol}    ${ZKData}
    ${reserved_openStockCol}    execute javascript    ${DailyTasks_Reserved Open Stock_colNum_juqery}
    ${reserved_orderedCol}    execute javascript    ${DailyTasks_Reserved Qty_colNum_juqery}
    @{reserved_openStock}    evaluate    [t[${reserved_openStockCol}] for t in @{ZKData} if @{ZKData}.index(t) >= ${titleEndRowNum}]
    @{reserved_ordered}    evaluate    [t[${reserved_orderedCol}] for t in @{ZKData} if @{ZKData}.index(t) >= ${titleEndRowNum}]
    run keyword if    [t for t in @{reserved_prepack} if t !=0] != @{EMPTY}    log    reserved prepack have values![t for t in @{reserved_prepack} if t !=0]
    @{reserved_diff}    run keyword if    [t for t in @{reserved_prepack} if t !=0] == @{EMPTY} and @{reserved_openStock} != @{reserved_ordered}    evaluate    [(@{reserved_openStock}.index(a)+${titleEndRowNum}, a,b) for a in @{reserved_openStock} for b in @{reserved_ordered} if a != b and @{reserved_openStock}.index(a) == @{reserved_ordered}.index(b) and len(@{reserved_openStock}) == len(@{reserved_ordered})]
    @{reserved_allocated_receiver_diff}    run keyword if    [t for t in @{Receiver_prepack} if t !=0] == @{EMPTY} and [t for t in @{allocated_prepack} if t !=0] == @{EMPTY} and [t for t in @{reserved_prepack} if t !=0] == @{EMPTY}    evaluate    [(@{reserved_ordered}.index(a)+${titleEndRowNum}, a,b,c) for a in @{reserved_ordered}_ordered} for b in @{Receiver_ordered} for c in @{allocated_ordered} if a != b-c and @{reserved_ordered}.index(a) == @{Receiver_ordered}.index(b) and len(@{reserved_ordered}) == len(@{Receiver_ordered})and @{reserved_ordered}.index(a) == @{allocated_ordered}.index(c) and len(@{reserved_ordered}) == len(@{allocated_ordered})]
    run keyword and continue on failure    run keyword if    [t for t in @{reserved_prepack} if t !=0] == @{EMPTY} and @{reserved_openStock} != @{reserved_ordered}    fail    When reserved prepack have no value, reserved open stock is not euqal to reserved ordered!@{reserved_diff}
    run keyword and continue on failure    run keyword if    @{reserved_allocated_receiver_diff} != @{EMPTY}    fail    When Receiver prepack, Reserved prepack and Allocated prepack have no value, Reserved Qty is not euqal to (Receiver Qty-Allocated Qty)!@{reserved_allocated_receiver_diff}
    @{editList}    execute javascript    ${editBtnJquery}
    ${selectedEditBtnRow}    evaluate    random.randint(0,len(@{editList})/2-1)    random
    @{selectedEditBtnInfo}    split string    @{editList}[${selectedEditBtnRow}]    /
    ${editBtnPath}    replace string    ${DailyTasks_Button_Edit_rowPH}    row    @{selectedEditBtnInfo}[0]
    run keyword if    @{selectedEditBtnInfo}[1] >=780    execute javascript    $(".zsscroll").scrollTop(@{selectedEditBtnInfo}[1]-780)
    run keyword if    @{selectedEditBtnInfo}[1] >=780    sleep    1S
    run keyword if    @{selectedEditBtnInfo}[1] >=780    Wait Until Page Does Not Contain    Processing...    600
    run keyword if    @{selectedEditBtnInfo}[1] >=780    sleep    3S
    run keyword if    @{selectedEditBtnInfo}[1] >=780    wait until element is enabled    ${editBtnPath}    60
    newTabByEditBtnInZK    ${editBtnPath}    ${DailyTasks_tab_selected}    Detail by Style Color Size    ${verifyTxt}
    @{styleColor}    execute javascript    ${DailyTasks_tab_styleColorSize_styleColorList_jquery}
    ${styleColor_count}    evaluate    len(@{styleColor})
    run keyword and continue on failure    run keyword if    '@{styleColor}[0]'!='@{selectedEditBtnInfo}[2]/@{selectedEditBtnInfo}[3]' or ${styleColor_count} !=1    Fail    Style # and Color Code are incorrect in Detail by Style by Color by Size tab.

cancelInPopulateJob
    [Arguments]    ${userName}    ${userNum}    ${modelName}    ${tabName}    ${actionBtn}    ${pop_panel}
    ...    ${disabledBtn}    ${btnName}    ${titleEndRow}==0    ${checkedBoxFlag}=False    @{verifyData}
    click element    ${actionBtn}
    wait until page contains element    ${pop_panel}    30
    wait until element is visible    ${DailyTasks_popPanel_cancelBtn}    30
    Wait Until Page Does Not Contain    Processing...    600
    @{checkBoxInfo}    execute javascript    ${DailyTasks_validateCheckBox_jquery}
    run keyword and continue on failure    run keyword if    @{checkBoxInfo}[0] ==0 or @{checkBoxInfo}[1] !=1    fail    There are no checkbox or it is incorrect to display checkBox!
    @{dropdownOptions}    run keyword if    '${btnName}' != 'cancelJob' and '${btnName}' != 'submitCancelJob'    get list items    ${DailyTasks_popPanel_dropdown}
    ${randomOption}    run keyword if    '${btnName}' != 'cancelJob' and '${btnName}' != 'submitCancelJob'    evaluate    random.choice(@{dropdownOptions})    random
    run keyword if    '${btnName}' != 'cancelJob' and '${btnName}' != 'submitCancelJob'    select from list by label    ${DailyTasks_popPanel_dropdown}    ${randomOption}
    run keyword if    '${btnName}' != 'cancelJob' and '${btnName}' != 'submitCancelJob'    list selection should be    ${DailyTasks_popPanel_dropdown}    ${randomOption}
    @{checkBoxRows}    run keyword if    ${checkedBoxFlag}    execute javascript    ${DailyTasks_checkBoxRows_jquery}
    ${selectedRowsCount}    run keyword if    ${checkedBoxFlag}    evaluate    min(5,len(@{checkBoxRows}))
    @{randomCheckBoxRows}    run keyword if    ${checkedBoxFlag}    evaluate    sorted(random.sample(@{checkBoxRows},${selectedRowsCount}))    random
    ${currentTopPosition}    set variable    0
    ${titleEndTopPosition}    execute javascript    return $(".zstopblock").children("div:last").offset().top+$(".zsscroll").offset().top
    : FOR    ${item}    IN    @{randomCheckBoxRows}
    \    ${checkBoxPath}    replace string    ${DailyTasks_Transfer_addStyles_checkbox_rowPH}    [row]    [${item}]
    \    ${checkBoxPosition}    Get Vertical Position    ${checkBoxPath}
    \    ${currentTopPosition}    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    evaluate    ${currentTopPosition}+${checkBoxPosition}-${titleEndTopPosition}
    \    ...    ELSE    set variable    ${currentTopPosition}
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    execute javascript    $(".zsscroll").scrollTop(${currentTopPosition})
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    sleep    1S
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    Wait Until Page Does Not Contain    Processing...    600
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    sleep    3S
    \    successToClickCheckBox    ${checkBoxPath}
    \    #    click element    ${checkBoxPath}
    \    #    sleep    3S
    \    #    ${elementCountPath}    replace string    ${checkBoxPath}    Xpath=    ${EMPTY}
    \    #    ${elementCount}    get matching xpath count    ${elementCountPath}
    \    #    run keyword if    ${elementCount} > 0 and @{randomCheckBoxRows}.index(${item}) == 0    click element    ${checkBoxPath}    #
    \    ...    # Xpath=//div[@class='zsselecti']
    \    #    run keyword if    ${elementCount} > 0 and @{randomCheckBoxRows}.index(${item}) == 0    sleep    3S
    \    #    ${elementCount}    get matching xpath count    ${elementCountPath}
    \    #    run keyword if    ${elementCount} > 0    click element    Xpath=//div[@class='zsdata']/div[@class='zsselect']/div[@class='zsselecti']
    \    wait until page does not contain element    ${checkBoxPath}    30
    \    #    Capture Page Screenshot
    run keyword if    '${btnName}' == 'submitCancelJob'    click element    ${DailyTasks_popPanel_BtnSubmit}
    ...    ELSE    click element    ${DailyTasks_popPanel_cancelBtn}
    Wait Until Page Contains element    ${actionBtn}    60
    wait until page does not contain element    ${disabledBtn}    60
    Wait Until Page Does Not Contain    Processing...    600
    run keyword if    ${checkedBoxFlag} and '${btnName}' != 'submitCancelJob'    execute javascript    $(".zsscroll").scrollTop(0)
    run keyword if    ${checkedBoxFlag} and '${btnName}' != 'submitCancelJob'    sleep    1S
    run keyword if    ${checkedBoxFlag} and '${btnName}' != 'submitCancelJob'    Wait Until Page Does Not Contain    Processing...    600
    run keyword if    ${checkedBoxFlag} and '${btnName}' != 'submitCancelJob'    sleep    3S
    @{ZKData}    get ZK sheet Data    ${maxTopPagesCount}    ${maxLeftPagesCount}
    @{ZKDataByCol}    evaluate    zip(*@{ZKData})
    ${verifyCol}    run keyword if    '${btnName}' == 'populate'    execute javascript    ${DailyTasks_Allocated Qty_colNum_juqery}
    ...    ELSE    execute javascript    ${DailyTasks_Status_colNum_juqery}
    ${verifyCol_2}    run keyword if    '${btnName}' != 'populate'    execute javascript    ${DailyTasks_Job Ticket_colNum_juqery}
    @{cancel_diff}    run keyword if    '${btnName}' != 'submitCancelJob'    evaluate    [(b[${verifyCol}],d[${verifyCol}]) for a,b in enumerate(@{verifyData}) for c,d in enumerate(@{ZKData}) if a==c and b != d]
    ...    ELSE IF    '${btnName}' == 'submitCancelJob' and ${checkedBoxFlag}    evaluate    [(t,b,d) for t in @{randomCheckBoxRows} for a,b in enumerate(@{ZKDataByCol}[${verifyCol}]) for c,d in enumerate(@{ZKDataByCol}[${verifyCol_2}]) if a == t-1 and a==c and b != '' and d !='']
    ...    ELSE IF    '${btnName}' == 'submitCancelJob' and !${checkedBoxFlag}    evaluate    [(a,b,d]) for a,b in enumerate(@{ZKData}) for c,d in enumerate(@{ZKData}) if a >${titleEndRow} and a==c and b[${verifyCol}]!= @{EMPTY} and d[${verifyCol_2}] != @{EMPTY}]
    @{cancel_diff_2}    run keyword if    '${btnName}' == 'createJob' and '${btnName}' == 'cancelJob'    evaluate    [(b[${verifyCol_2}],d[${verifyCol_2}]) for a,b in enumerate(@{verifyData}) for c,d in enumerate(@{ZKData}) if a==c and b != d]
    log many    @{ZKData}
    log many    @{verifyData}
    run keyword and continue on failure    run keyword if    '${btnName}' != 'submitCancelJob' and @{ZKData} != @{verifyData}    fail    ${userName}_${userNum}_${modelName}_${tabName}_${btnName} It is incorrect to click cancel button! @{cancel_diff}
    run keyword and continue on failure    run keyword if    (@{cancel_diff} != @{EMPTY} or @{cancel_diff_2} != @{EMPTY})and '${btnName}' == 'submitCancelJob'    fail    ${userName}_${userNum}_${modelName}_${tabName}_${btnName} It is incorrect to submit CancelJob! @{cancel_diff};@{cancel_diff_2}
    @{checkBoxRows}    execute javascript    ${DailyTasks_checkBoxRows_jquery}
    run keyword and continue on failure    run keyword if    @{checkBoxRows} != @{EMPTY}    fail    ${userName}_${userNum}_${modelName}_${tabName}_${btnName} CheckBox don't disappear after click cancel button!
    [Return]    @{ZKData}

populateAndValidationData
    [Arguments]    ${userName}    ${userNum}    ${modelName}    ${tabName}    ${populateType}    ${expandDoorColCount}
    ...    ${expandDoorPHColPath}    ${leftPosition}    ${checkedBoxFlag}=False    @{doorExpandRowsStartCol}
    click element    ${ZK_Button_Populate}
    wait until page contains element    ${DailyTasks_Panel_Populate}    30
    wait until element is visible    ${DailyTasks_popPanel_BtnSubmit}    30
    Wait Until Page Does Not Contain    Processing...    60
    @{checkBoxInfo}    execute javascript    ${DailyTasks_validateCheckBox_jquery}
    run keyword and continue on failure    run keyword if    @{checkBoxInfo}[0] ==0 or @{checkBoxInfo}[1] !=1    fail    There are no checkbox or it is incorrect to display checkBox!
    select from list by label    ${DailyTasks_popPanel_dropdown}    ${populateType}
    list selection should be    ${DailyTasks_popPanel_dropdown}    ${populateType}
    @{checkBoxRows}    run keyword if    ${checkedBoxFlag}    execute javascript    ${DailyTasks_checkBoxRows_jquery}
    ${selectedRowsCount}    evaluate    min(5,len(@{checkBoxRows}))
    @{randomCheckBoxRows}    evaluate    sorted(random.sample(@{checkBoxRows},${selectedRowsCount}))    random
    ${titleEndTopPosition}    execute javascript    return $(".zstopblock").children("div:last").offset().top+$(".zsscroll").offset().top
    ${currentTopPosition}    set variable    0
    : FOR    ${item}    IN    @{randomCheckBoxRows}
    \    ${checkBoxPath}    replace string    ${DailyTasks_Transfer_addStyles_checkbox_rowPH}    [row]    [${item}]
    \    ${checkBoxPosition}    Get Vertical Position    ${checkBoxPath}
    \    ${currentTopPosition}    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    evaluate    ${currentTopPosition}+${checkBoxPosition}-${titleEndTopPosition}    ${EMPTY}
    \    ...    ELSE    set variable    ${currentTopPosition}
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    execute javascript    $(".zsscroll").scrollTop(${currentTopPosition})
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    sleep    1S
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    Wait Until Page Does Not Contain    Processing...    600
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    sleep    3S
    \    successToClickcheckbox    ${checkBoxPath}
    \    #    sleep    3S
    \    #    ${elementCountPath}    replace string    ${checkBoxPath}    Xpath=    ${EMPTY}
    \    #    ${elementCount}    get matching xpath count    ${elementCountPath}
    \    #    run keyword if    ${elementCount} > 0 and @{randomCheckBoxRows}.index(${item}) == 0    click element    ${checkBoxPath}    #
    \    ...    # Xpath=//div[@class='zsselecti']
    \    #    run keyword if    ${elementCount} > 0 and @{randomCheckBoxRows}.index(${item}) == 0    sleep    3S
    \    #    ${elementCount}    get matching xpath count    ${elementCountPath}
    \    #    run keyword if    ${elementCount} > 0    click element    Xpath=//div[@class='zsdata']/div[@class='zsselect']/div[@class='zsselecti']
    \    #    wait until page does not contain element    ${checkBoxPath}    30
    #    Capture Page Screenshot
    click element    ${DailyTasks_popPanel_BtnSubmit}
    Wait Until Page Contains element    ${ZK_Button_Populate}    60
    wait until page does not contain element    ${ZK_Button_disabledPopulate}    60
    Wait Until Page Does Not Contain    Processing...    60
    execute javascript    $(".zsscroll").scrollLeft(${leftPosition})
    sleep    1S
    Wait Until Page Does Not Contain    Processing...    600
    sleep    3S
    ${col}    set variable    @{doorExpandRowsStartCol}[2]
    : FOR    ${item}    IN RANGE    0    5    #    ${expandDoorColCount}
    \    ${col}    run keyword if    ${item} > 0    execute javascript    return $(".zstopblock").children("div:contains('◄►')").children("div:contains('◄►'):first").index()+1
    \    ...    ELSE    set variable    ${col}
    \    ${leftPosition}    run keyword if    ${col} == 0    evaluate    ${leftPosition}+${DailyTask_screenWidth}
    \    ...    ELSE    set variable    ${leftPosition}
    \    run keyword if    ${col} == 0    execute javascript    $(".zsscroll").scrollLeft(${leftPosition})
    \    run keyword if    ${col} == 0    sleep    1S
    \    run keyword if    ${col} == 0    Wait Until Page Does Not Contain    Processing...    600
    \    run keyword if    ${col} == 0    sleep    3S
    \    ${col}    run keyword if    ${col} == 0    execute javascript    return $(".zstopblock").children("div:contains('◄►')").children("div:contains('◄►'):first").index()+1
    \    ...    ELSE    set variable    ${col}
    \    ${col_tmp}    evaluate    ${col}-2
    \    ${expandDoorColPath}    replace string    ${expandDoorPHColPath}    [Col]    [${col}]
    \    ${expandDoorColLeftPosition}    Get Horizontal Position    ${expandDoorColPath}
    \    ${leftPosition}    run keyword if    ${expandDoorColLeftPosition} >${DailyTask_screenWidth}    evaluate    ${leftPosition}+${expandDoorColLeftPosition}-50
    \    ...    ELSE    set variable    ${leftPosition}
    \    run keyword if    ${expandDoorColLeftPosition} > ${DailyTask_screenWidth}    execute javascript    $(".zsscroll").scrollLeft(${leftPosition})
    \    run keyword if    ${expandDoorColLeftPosition} > ${DailyTask_screenWidth}    sleep    1S
    \    run keyword if    ${expandDoorColLeftPosition} >${DailyTask_screenWidth}    Wait Until Page Does Not Contain    Processing...    600
    \    run keyword if    ${expandDoorColLeftPosition} > ${DailyTask_screenWidth}    sleep    3S
    \    click element    ${expandDoorColPath}
    \    Wait Until Page Does Not Contain element    ${expandDoorColPath}//div[contains(text(),'◄►')]    120
    \    ${adjCol}    execute javascript    return $(".zstopblock").children("div:eq(@{doorExpandRowsStartCol}[1])").children("div:gt(${col_tmp}):contains('Adj'):not(div:contains('Prepack')):not(div:contains('Open Stock'))").index()+1
    \    ${typeCol}    execute javascript    return $(".zstopblock").children("div:eq(@{doorExpandRowsStartCol}[1])").children("div:gt(${col_tmp}):contains('${populateType}'):not(div:contains('Prepack')):not(div:contains('Open Stock'))").index()+1
    \    ${elementLeftPosition}    run keyword if    ${typeCol} == 0    execute javascript    return $(".zstopblock").children("div:eq(@{doorExpandRowsStartCol}[1])").children("div:gt(${col_tmp}):contains('Adj'):not(div:contains('Prepack')):not(div:contains('Open Stock'))").offset().left
    \    ${leftPosition}    run keyword if    ${typeCol} == 0    evaluate    ${leftPosition} + ${elementLeftPosition}
    \    ...    ELSE    set variable    ${leftPosition}
    \    run keyword if    ${typeCol} == 0    execute javascript    $(".zsscroll").scrollLeft(${leftPosition})
    \    run keyword if    ${typeCol} == 0    sleep    1S
    \    run keyword if    ${typeCol} == 0    Wait Until Page Does Not Contain    Processing...    600
    \    run keyword if    ${typeCol} == 0    sleep    3S
    \    ${typeCol}    run keyword if    ${typeCol} == 0    execute javascript    return $(".zstopblock").children("div:eq(@{doorExpandRowsStartCol}[1])").children("div:gt(${col_tmp}):contains('${populateType}'):not(div:contains('Prepack')):not(div:contains('Open Stock'))").index()+1
    \    ...    ELSE    set variable    ${typeCol}
    \    ${expandedDoorsColStr}    run keyword if    ${item} == 0    set variable    ${adjCol},${typeCol}
    \    ...    ELSE    set variable    ${expandedDoorsColStr};${adjCol},${typeCol}
    execute javascript    $(".zsscroll").scrollLeft(0)
    sleep    1S
    Wait Until Page Does Not Contain    Processing...    600
    sleep    3S
    @{expandedDoorsCol}    split string    ${expandedDoorsColStr}    ;
    @{ZKData}    get ZK sheet Data    ${maxTopPagesCount}    ${maxLeftPagesCount}
    : FOR    ${item}    IN RANGE    0    5    #    ${expandDoorColCount}
    \    @{doorCols}    split string    @{expandedDoorsCol}[${item}]    ,
    \    @{adj}    evaluate    [b[@{doorCols}[0]] for (a,b) in enumerate(@{ZKData})]
    \    ${doorNameRow}    evaluate    @{doorExpandRowsStartCol}[1]-1
    \    ${doorName}    replace string    @{adj}[${doorNameRow}]    ►◄    ${EMPTY}
    \    @{type}    evaluate    [b[@{doorCols}[1]] for (a,b) in enumerate(@{ZKData})]
    \    @{populate_diff}    run keyword if    ${checkedBoxFlag}    evaluate    [(a+1,b,d) for a,b in enumerate(@{adj}) for c,d in enumerate(@{type}) for t in @{randomCheckBoxRows} if a>@{doorExpandRowsStartCol}[1] and a == t-1 and a==c and b != d]
    \    ...    ELSE    evaluate    [(a+1,b,d) for a,b in enumerate(@{adj}) for c,d in enumerate(@{type}) if a>@{doorExpandRowsStartCol}[1] and a==c and b != d]
    \    run keyword and continue on failure    run keyword if    @{populate_diff} != @{EMPTY}    fail    ${userName}_${userNum}_${modelName}_${tabName}_${doorName} Adj is not equal to ${populateType}!@{populate_diff}
    [Return]    @{ZKData}

createJobAndValidationData
    [Arguments]    ${userName}    ${userNum}    ${modelName}    ${tabName}    ${jobType}    ${titleEndRow}
    ...    ${checkedBoxFlag}=False    @{data}
    click element    ${ZK_Button_Job}
    wait until page contains element    ${DailyTasks_Panel_createJob}    30
    wait until element is visible    ${DailyTasks_popPanel_BtnSubmit}    30
    Wait Until Page Does Not Contain    Processing...    60
    @{checkBoxInfo}    execute javascript    ${DailyTasks_validateCheckBox_jquery}
    run keyword and continue on failure    run keyword if    @{checkBoxInfo}[0] ==0 or @{checkBoxInfo}[1] !=1    fail    There are no checkbox or it is incorrect to display checkBox!
    select from list by label    ${DailyTasks_popPanel_dropdown}    ${jobType}
    list selection should be    ${DailyTasks_popPanel_dropdown}    ${jobType}
    @{checkBoxRows}    run keyword if    ${checkedBoxFlag}    execute javascript    ${DailyTasks_validToJobcheckBoxRows_jquery}    #    ${DailyTasks_checkBoxRows_jquery}
    ${selectedRowsCount}    evaluate    min(5,len(@{checkBoxRows}))
    @{randomCheckBoxRows}    evaluate    sorted(random.sample(@{checkBoxRows},${selectedRowsCount}))    random
    ${qtyAllocatedCol}    execute javascript    ${DailyTasks_Allocated Qty_colNum_juqery}
    ${receiverQtyCol}    execute javascript    ${DailyTasks_Receiver Qty_colNum_juqery}
    @{qtyAllocated}    evaluate    [b[${qtyAllocatedCol}] for a,b in enumerate(@{data}) if a > ${titleEndRow}]
    @{receiverQty}    evaluate    [b[${receiverQtyCol}] for a,b in enumerate(@{data}) if a > ${titleEndRow}]
    @{noJob}    run keyword if    ${checkedBoxFlag}    evaluate    [(t,b,d) for a,b in enumerate(@{qtyAllocated}) for c,d in enumerate(@{receiverQty}) for t in @{randomCheckBoxRows} if b > d and a == c and a==t-1]
    ...    ELSE    evaluate    [(a,b,d) for a,b in enumerate(@{qtyAllocated}) for c,d in enumerate(@{receiverQty}) if b > d and a == c]
    @{checkBoxInNoJob}    run keyword if    @{noJob} != @{EMPTY}    evaluate    [t for t in @{randomCheckBoxRows} if t in zip(*@{noJob})[0]]
    ${titleEndTopPosition}    execute javascript    return $(".zstopblock").children("div:last").offset().top+$(".zsscroll").offset().top
    ${currentTopPosition}    set variable    0
    : FOR    ${item}    IN    @{randomCheckBoxRows}
    \    ${checkBoxPath}    replace string    ${DailyTasks_Transfer_addStyles_checkbox_rowPH}    [row]    [${item}]
    \    ${checkBoxPosition}    Get Vertical Position    ${checkBoxPath}
    \    ${currentTopPosition}    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    evaluate    ${currentTopPosition}+${checkBoxPosition}-${titleEndTopPosition}
    \    ...    ELSE    set variable    ${currentTopPosition}
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    execute javascript    $(".zsscroll").scrollTop(${currentTopPosition})
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    sleep    1S
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    Wait Until Page Does Not Contain    Processing...    600
    \    run keyword if    ${checkBoxPosition}> ${DailyTask_screenHeigh}    sleep    3S
    \    successToClickCheckbox    ${checkBoxPath}
    \    #    sleep    3S
    \    #    ${elementCountPath}    replace string    ${checkBoxPath}    Xpath=    ${EMPTY}
    \    #    ${elementCount}    get matching xpath count    ${elementCountPath}
    \    #    run keyword if    ${elementCount} > 0 and @{randomCheckBoxRows}.index(${item}) == 0    click element    ${checkBoxPath}    #
    \    ...    # Xpath=//div[@class='zsselecti']
    \    #    run keyword if    ${elementCount} > 0 and @{randomCheckBoxRows}.index(${item}) == 0    sleep    3S
    \    #    ${elementCount}    run keyword if    ${elementCount} > 0 and @{randomCheckBoxRows}.index(${item}) == 0    get matching xpath count    ${elementCountPath}
    \    ...    # ELSE    set variable    ${elementCount}
    \    #    run keyword if    ${elementCount} > 0    click element    Xpath=//div[@class='zsdata']/div[@class='zsselect']/div[@class='zsselecti']
    \    #    wait until page does not contain element    ${checkBoxPath}    30
    \    Capture Page Screenshot
    click element    ${DailyTasks_popPanel_BtnSubmit}
    run keyword if    (@{noJob} != @{EMPTY} and not ${checkedBoxFlag}) or @{checkBoxInNoJob} != @{EMPTY}    Wait Until Page Contains element    ${ZK_popPanel_message}
    run keyword if    (@{noJob} != @{EMPTY} and not ${checkedBoxFlag}) or @{checkBoxInNoJob} != @{EMPTY}    Wait Until element Contains    ${ZK_popPanel_message}    You have inputted more # of Prepack or Open Stock qty than total amount and there is negative reserve qty.
    run keyword if    (@{noJob} != @{EMPTY} and not ${checkedBoxFlag}) or @{checkBoxInNoJob} != @{EMPTY}    click element    ${ZK_popPanel_message_button_OK}
    run keyword if    (@{noJob} != @{EMPTY} and not ${checkedBoxFlag}) or @{checkBoxInNoJob} != @{EMPTY}    Wait Until Page Contains element    ${ZK_Button_Job}    60
    run keyword if    (@{noJob} != @{EMPTY} and not ${checkedBoxFlag}) or @{checkBoxInNoJob} != @{EMPTY}    Wait Until Page Does Not Contain    Processing...    60
    #    run keyword if    (@{noJob} != @{EMPTY} and not ${checkedBoxFlag}) or @{checkBoxInNoJob} != @{EMPTY}    wait until page contains element    ${DailyTasks_popPanel_cancelBtn}    60
    #    run keyword if    (@{noJob} != @{EMPTY} and not ${checkedBoxFlag}) or @{checkBoxInNoJob} != @{EMPTY}    click element    ${DailyTasks_popPanel_cancelBtn}
    #    run keyword if    (@{noJob} != @{EMPTY} and not ${checkedBoxFlag}) or @{checkBoxInNoJob} != @{EMPTY}    Wait Until Page Does Not Contain    Processing...    60
    run keyword if    (@{noJob} != @{EMPTY} and not ${checkedBoxFlag}) or @{checkBoxInNoJob} != @{EMPTY}    wait until page does not contain element    ${ZK_Button_disabledJob}    60
    return from keyword if    (@{noJob} != @{EMPTY} and not ${checkedBoxFlag}) or @{checkBoxInNoJob} != @{EMPTY}    @{data}
    run keyword if    @{checkBoxRows} == @{EMPTY}    Wait Until Page Contains element    ${ZK_popPanel_message}
    run keyword if    @{checkBoxRows} == @{EMPTY}    Wait Until element Contains    ${ZK_popPanel_message}    Please input Adjusted Allocated Qty first, thanks.
    run keyword if    @{checkBoxRows} == @{EMPTY}    click element    ${ZK_popPanel_message_button_OK}
    run keyword if    @{checkBoxRows} == @{EMPTY}    Wait Until Page Contains element    ${ZK_Button_Job}    60
    run keyword if    @{checkBoxRows} == @{EMPTY}    Wait Until Page Does Not Contain    Processing...    60
    #    run keyword if    @{checkBoxRows} == @{EMPTY}    wait until page contains element    ${DailyTasks_popPanel_cancelBtn}    60
    #    run keyword if    @{checkBoxRows} == @{EMPTY}    click element    ${DailyTasks_popPanel_cancelBtn}
    #    run keyword if    @{checkBoxRows} == @{EMPTY}    Wait Until Page Does Not Contain    Processing...    60
    run keyword if    @{checkBoxRows} == @{EMPTY}    wait until page does not contain element    ${ZK_Button_disabledJob}    60
    return from keyword if    @{checkBoxRows} == @{EMPTY}    @{data}
    run keyword if    not ${checkedBoxFlag}    Wait Until Page Contains element    ${ZK_popPanel_message}
    run keyword if    not ${checkedBoxFlag}    Wait Until element Contains    ${ZK_popPanel_message}    You are about to create a job for all style/colors in current page
    run keyword if    not ${checkedBoxFlag}    click element    ${ZK_popPanel_message_button_Yes}
    Wait Until Page Contains element    ${ZK_Button_Job}    60
    wait until page does not contain element    ${ZK_Button_disabledJob}    60
    Wait Until Page Does Not Contain    Processing...    60
    @{ZKData}    get ZK sheet Data    ${maxTopPagesCount}    ${maxLeftPagesCount}
    @{ZKDataByCol}    evaluate    zip(*@{ZKData})
    ${verifyCol}    execute javascript    ${DailyTasks_Status_colNum_juqery}
    ${verifyCol_2}    execute javascript    ${DailyTasks_Job Ticket_colNum_juqery}
    @{createJob_diff}    run keyword if    ${checkedBoxFlag}    evaluate    [(a+1,b,d) for a,b in enumerate(@{ZKDataByCol}[${verifyCol}]) for c,d in enumerate(@{ZKDataByCol}[${verifyCol_2}]) if a+1 in @{randomCheckBoxRows} and a==c and (b != 'R' or d == '')]
    ...    ELSE    evaluate    [(a+1,b,d) for a,b in enumerate(@{ZKDataByCol}[${verifyCol}]) for c,d in enumerate(@{ZKDataByCol}[${verifyCol_2}]) if a >${titleEndRow} and a==c and (b != 'R' or d == '')]
    run keyword and continue on failure    run keyword if    @{createJob_diff} != @{EMPTY}    fail    ${userName}_${userNum}_${modelName}_${tabName} It is incorrect to createJob ${jobType}! @{createJob_diff}
    [Return]    @{ZKData}

successToClickCheckBox
    [Arguments]    ${uncheckBoxPath}
    click element    ${uncheckBoxPath}
    ${uncheckBoxCountPath}    replace string    ${uncheckBoxPath}    Xpath=    ${EMPTY}
    : FOR    ${item}    IN RANGE    0    1000
    \    sleep    3S
    \    ${uncheckBoxCount}    get matching xpath count    ${uncheckBoxCountPath}
    \    return from keyword if    ${uncheckBoxCount} == 0
    \    ${uncheckBoxLeftPosition}    Get Horizontal Position    ${uncheckBoxPath}
    \    ${uncheckBoxTopPosition}    Get Vertical Position    ${uncheckBoxPath}
    \    return from keyword if    ${uncheckBoxLeftPosition}==0 and ${uncheckBoxTopPosition} == 0
    \    ${selectedCellLeftPosition}    Get Horizontal Position    Xpath=//div[@class='zsdata']/div[@class='zsselect']/div[@class='zsselecti']
    \    ${selectedCellTopPosition}    Get Vertical Position    Xpath=//div[@class='zsdata']/div[@class='zsselect']/div[@class='zsselecti']
    \    run keyword if    ${uncheckBoxLeftPosition} != 0 and ${uncheckBoxTopPosition} !=0 and abs(${uncheckBoxLeftPosition}-${selectedCellLeftPosition}) <5 and \ abs(${uncheckBoxTopPosition}-${selectedCellTopPosition})<5    click element    Xpath=//div[@class='zsdata']/div[@class='zsselect']/div[@class='zsselecti']
    \    ...    ELSE    click element    ${uncheckBoxPath}
    run keyword and continue on failure    fail    It is fail to check checkBox!

randomSelectCheckbox
    [Arguments]    ${checkBoxRowPHPath}    ${checkboxsCount}    ${selectedCount}
    @{checkBoxRows}    evaluate    range(1,${checkboxsCount}+1)
    @{randomCheckBoxRow}    evaluate    sorted(random.sample(@{checkBoxRows},min( ${selectedCount},len(@{checkBoxRows}))))    random
    : FOR    ${item}    IN    @{randomCheckBoxRow}
    \    ${currentCheckboxPath}    replace string    ${checkBoxRowPHPath}    [row]    [${item}]
    \    select checkbox    ${currentCheckboxPath}
    \    run keyword and continue on failure    checkbox should be selected    ${currentCheckboxPath}
    [Return]    @{randomCheckBoxRow}

successToClickElement
    [Arguments]    ${elementPath}    ${sucessFlagValue}    ${sucessFlagAttribute}=text    ${elementType}=titleElement
    click element    ${elementPath}
    ${elementCountPath}    replace string    ${elementPath}    Xpath=    ${EMPTY}
    ${selectedCellPath}    run keyword if    '${elementType}'== 'titleElement'    set variable    Xpath=//div[@class='zstopblock']/following-sibling::div[@class='zsselect']/div[@class='zsselecti']
    ...    ELSE    set variable    Xpath=//div[@class='zsdata']/div[@class='zsselect']/div[@class='zsselecti']
    : FOR    ${item}    IN RANGE    0    1000
    \    sleep    3S
    \    ${elementCount}    get matching xpath count    ${elementCountPath}
    \    return from keyword if    ${elementCount} == 0
    \    ${currentValue}    run keyword if    '${sucessFlagAttribute}' == 'text'    get text    ${elementPath}
    \    ...    ELSE    get element attribute    ${elementPath}${sucessFlagAttribute}
    \    return from keyword if    '${sucessFlagValue}' in '${currentValue}'
    \    ${elementLeftPosition}    Get Horizontal Position    ${elementPath}
    \    ${elementTopPosition}    Get Vertical Position    ${elementPath}
    \    return from keyword if    ${elementLeftPosition}==0 and ${elementTopPosition} == 0
    \    ${selectedCellLeftPosition}    Get Horizontal Position    ${selectedCellPath}
    \    ${selectedCellTopPosition}    Get Vertical Position    ${selectedCellPath}
    \    run keyword if    ${elementLeftPosition} != 0 and ${elementTopPosition} !=0 and abs(${elementLeftPosition}-${selectedCellLeftPosition}) <5 and abs(${elementTopPosition}-${selectedCellTopPosition})<5    click element    ${selectedCellPath}
    \    ...    ELSE    click element    ${elementPath}
    run keyword and continue on failure    fail    It is fail to cilck title element!
